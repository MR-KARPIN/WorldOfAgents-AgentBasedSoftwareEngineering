package es.upm.emse.absd.team1.agents.platform.UnitManager.GameBehaviours;

import es.upm.emse.absd.ontology.woa.WoaOntology;
import es.upm.emse.absd.ontology.woa.WoaOntologyVocabulary;
import es.upm.emse.absd.team1.agents.Utils;
import es.upm.emse.absd.team1.agents.platform.UnitInfo;
import es.upm.emse.absd.team1.agents.platform.UnitManager.AgUnitManager;
import jade.content.lang.Codec;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.Ontology;
import jade.core.AID;
import jade.core.behaviours.CyclicBehaviour;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import jade.lang.acl.UnreadableException;
import lombok.extern.java.Log;

import static es.upm.emse.absd.team1.agents.Utils.*;

@Log

/*
            2.2 Explotar recurso
 */

public class UnitManagerGameBehaviour_ResourceExploitation extends CyclicBehaviour {
    private final AgUnitManager agente;
    private final Codec codec = new SLCodec();
    private final Ontology ontology = WoaOntology.getInstance();

    public UnitManagerGameBehaviour_ResourceExploitation(AgUnitManager a) {
        super(a);
        this.agente=a;
    }

    @Override
    public void action() {
        //Escucha de forma cíclica dos posibles mensajes:
        //  1. Mensaje de unitController pidiendo explotar un recurso
        //  2. Mensaje del resourceExploitation comunicando la finalización de la explotación.
        //EXPLICACIÓN: se hace así para no bloquear el agente y que el hilo del agente pueda hacer otras tareas mientras

        ACLMessage msg;
        if((msg = this.getAgent().receive(MessageTemplate.MatchProtocol(WoaOntologyVocabulary.COLLECT_RESOURCE))) != null){
            resourceExploitationRequest(msg);
        }
        if ((msg = this.getAgent().receive(MessageTemplate.MatchSender
                (Utils.untilFindDFS(this.getAgent(), "ResourceManager")))) != null){
            log.info(ANSI_YELLOW + this.agente.getLocalName() + "Explotación de una unidad terminada, se lo comunico");
            finishExploitationReceived(msg);
        }
    }


    private void resourceExploitationRequest(ACLMessage msg) {
        //2.2.3. As the unit manager I want to check the availability of a unit so that it can exploit a resource
        //hacer primeras comprobaciones
        //enviar a la unit agree, refuse o notUnderstood.
        AID unitAID = msg.getSender();
        ACLMessage response = msg.createReply();
        if (agente.isBlocked(unitAID)) {
            //SCENARIO 2: A request to exploit some resource from a unit controller blocked is not allowed
            response.setPerformative(ACLMessage.REFUSE);
            log.info(ANSI_YELLOW + this.getAgent().getLocalName() + ": " + unitAID.getLocalName() + " is a blocked unit");
            this.getAgent().send(response);
        }
        else{
            response.setPerformative(ACLMessage.AGREE);
            log.info(ANSI_YELLOW + this.getAgent().getLocalName() + ": " + unitAID.getLocalName() + " AGREE enviado, no está bloqueada");
            this.getAgent().send(response);

            if (agente.getPhase() != 1){
                //CASO ESPECIAL ⇾ si ha terminado el juego se le envía a la unidad un FAILURE desde aquí mismo
                response.setPerformative(ACLMessage.FAILURE);
                log.info(ANSI_YELLOW + this.getAgent().getLocalName() + " fase de juego incorrecta, " + unitAID.getLocalName());
            } else {
                //SCENARIO 1: A request to exploit some resource from a unit controller not blocked is allowed
                //2.2.4. As the unit manager, I want to block a unit exploiting a resource
                //so that it cannot do something else during the exploitation
                agente.blockUnit(unitAID);
                //2.2.5. As the unit manager I want to ask the resource manager
                //to exploit some resource so that it can control its exploitation

                //IMPORTANTE: El resource manager necesita que en el mensaje le pases el AID la tribu a la que pertenece la unidad,
                //así luego puede informar al tribe accountant del recurso que ha ganado
                // además también le tienes que enviar la Position en la que está y el propio AID de la unidad.
                UnitInfo unitInfo = agente.findUnitInfo(unitAID);
                Object[] exploitationInfo ={unitInfo.getPosActualX(), unitInfo.getPosActualY(), unitAID, unitInfo.getTribeAID()};
                ACLMessage exploitMsg = newMsgWithObject(this.getAgent(), ACLMessage.INFORM,
                        exploitationInfo, Utils.untilFindDFS(this.getAgent(), "ResourceManager"), "ExplotarRecurso");
                log.info(ANSI_YELLOW + this.getAgent().getLocalName() +
                        " Petición de explotación para " + unitAID.getLocalName() + " mandada al resource manager");
                this.getAgent().send(exploitMsg);
            }
        }
    }


    //Javier:
    //2.2.11
    //2.2.11. As the unit manager, I want to confirm the result of exploiting
    // some resource so that the unit is unblocked
    //SCENARIO 1: the exploitation was correct, the unit is unblocked, and it is informed positively
    //SCENARIO 2: the exploitation was wrong, the unit is unblocked, and it is informed about the failure
    private void finishExploitationReceived(ACLMessage msg){
        //según el protocolo enviaremos un inform (explotación ok) o un failure a la unidad
        String status = msg.getProtocol();
        try { //obtener del mensaje el AID de la unidad que ha terminado la explotación.

            AID unitAID = (AID) msg.getContentObject();
            this.agente.unblockUnit(unitAID); //Desbloquear unidad
            //Se vuelve a comprobar que no se ha terminado la fase de juego
            ACLMessage informUnit;
            if(status.equals("AcceptedResourceRequest") && this.agente.getPhase()==1){
                informUnit = newMsgWithOnto(this.agente, unitAID, ACLMessage.INFORM, this.codec, this.ontology,
                        null, WoaOntologyVocabulary.COLLECT_RESOURCE); //Enviar mensaje con ontología de INFORM
            }else{
                informUnit = newMsgWithOnto(this.agente, unitAID, ACLMessage.FAILURE, this.codec, this.ontology,
                        null, WoaOntologyVocabulary.COLLECT_RESOURCE); //Enviar mensaje con ontología de FAILURE
            }
            agente.send(informUnit);
        }
        catch (UnreadableException e) { throw new RuntimeException(e); }
    }
}